mq_routing_rules:
  "/iot/sensor/light/#":
    qos: 0
    encoding: "utf-8"
    parser: parsers.json_parser
    kafka_topic: iot_sensor_light
    kafka_topic_dlq: iot_sensor_light_dlq
    kafka_schema_key_type: Null
    kafka_schema_key_file: Null
    kafka_schema_value_type: Null
    kafka_schema_value_file: Null
    stop_processing_if_matched: True
    smt:
      - setValue.vendor: "$topic.split('/', 4)"
      - setValue.mac_address: "$topic.split('/', -1)"
      - setValue.mqtt_topic: "$topic"
      - setValue.static_field: "I can be anything"
      - dropValue: "dummy_field"
      - setHeader.static_header: "My static header"
      - dropHeader: "mqtt.message.id"
      - keyAsJSON: "mqtt_topic"
      - setKey.static_Key: "My static key"
      - dropKey: "static_Key"
      - renameValue.mac_address: "MAC_Address"
      - valueToKey.dynamic_Key: "static_field"
      - renameKey.mqtt_topic: "MQTT_Topic"
      - renameHeader.mqtt.qos: "QoS"

  "/iot/sensor/env/#":
    qos: 0
    encoding: "utf-8"
    parser: parsers.json_parser
    kafka_topic: iot_sensor_env
    kafka_topic_dlq: iot_sensor_env_dlq
    kafka_schema_key_type: Null
    kafka_schema_key_file: Null
    kafka_schema_value_type: Null
    kafka_schema_value_file: Null
    stop_processing_if_matched: True
    smt:
      - keyAsJSON: "mqtt_topic"
      - setValue.vendor: "$topic.split('/', 4)"
      - setValue.mac_address: "$topic.split('/', -1)"
      - setValue.mqtt_topic: "$topic"
      - setValue.static_field: "I can be anything"
      - dropValue: "dummy_field"

  "/iot/sensor/pir/#":
    qos: 0
    encoding: "utf-8"
    parser: parsers.json_parser
    kafka_topic: iot_sensor_pir
    kafka_topic_dlq: iot_sensor_pir_dlq
    kafka_schema_key_type: Null
    kafka_schema_key_file: Null
    kafka_schema_value_type: Null
    kafka_schema_value_file: Null
    stop_processing_if_matched: True
    smt:
      - keyAsJSON: "mqtt_topic"
      - setValue.vendor: "$topic.split('/', 4)"
      - setValue.mac_address: "$topic.split('/', -1)"
      - setValue.mqtt_topic: "$topic"
      - setValue.static_field: "I can be anything"
      - dropValue: "dummy_field"


kafka_routing_rules:
  "iot_data_reverse":
    encoding: "utf-8"
    kafka_schema_key_type: Null
    kafka_schema_value_type: Null
    mq_topic: key # key, value, value.{field_name}, header.{field_name}
    mq_payload: value # key, value, value.{field_name}, header.{field_name}
    mq_qos: 0

  "demo_users":
    encoding: "utf-8"
    kafka_schema_key_type: Null
    kafka_schema_value_type: avro
    mq_topic: key # key, value, value.{field_name}, header.{field_name}
    mq_payload: value # key, value, value.{field_name}, header.{field_name}
    mq_qos: 0


mqtt:
  host: "localhost"
  port: 1883
  keepalive: 60
  transport: "tcp"
  protocol: "MQTTv311" # MQTTv31, MQTTv311, MQTTv5
  reconnect_on_failure: True
  username: Null
  password: Null
  client_id: Null
  clean_session: True
  ca_certs: Null
  certfile: Null
  keyfile: Null
  cert_reqs: "CERT_NONE" # CERT_NONE, CERT_OPTIONAL, CERT_REQUIRED
  tls_version: Null # PROTOCOL_SSLv23, PROTOCOL_SSLv2, PROTOCOL_SSLv3, PROTOCOL_TLSv1, PROTOCOL_TLSv1_1, PROTOCOL_TLSv1_2


kafka_auth:
  bootstrap.servers: "localhost:9092"
  #security.protocol: "SASL_SSL"
  #sasl.mechanisms: "PLAIN"
  #sasl.username: "sasl_username"
  #sasl.password: "sasl_password"


kafka_producer:
  acks: "all"
  client.id: "mqtt2kafka"
  partitioner: "murmur2_random"
  enable.idempotence: True
  # Any other Kafka producer configuration set here will be applied


kafka_consumers:
  consumers: 6
  group.id: "mqtt2kafka-reverse"
  auto.offset.reset: "earliest"
  # Any other Kafka consumer configuration set here will be applied, except 'client.id' as it will be set as {group.id}-{sequential number from 0 to (consumers - 1)}


schema_registry:
  url: "http://localhost:8081"
  #basic.auth.user.info: "basic_auth:user_info"
